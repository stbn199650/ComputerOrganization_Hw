// top
`include "Add.v"
`include "ALU.v"
`include "Controller.v"
`include "Jump_Ctrl.v"
`include "Mux2to1.v"
`include "Mux4to1.v"
`include "PC.v"
`include "Regfile.v"
`include "Sign_Extend.v"

module top ( clk,
             rst,
			 // Instruction Memory
			 IM_Address,
             Instruction,
			 // Data Memory
			 DM_Address,
			 DM_enable,
			 DM_Write_Data,
			 DM_Read_Data);

	parameter data_size = 32;
	parameter mem_size = 16;	

	input  clk, rst;
	
	// Instruction Memory
	output [mem_size-1:0] IM_Address;	
	input  [data_size-1:0] Instruction;

	// Data Memory
	output [mem_size-1:0] DM_Address;
	output DM_enable;
	output [data_size-1:0] DM_Write_Data;	
    input  [data_size-1:0] DM_Read_Data;
	
	// write your code here
	
	// ALU
	wire [3:0] ALUop;
	wire [data_size-1:0] src;
	//wire [data_size-1:0] src2;
	wire [4:0] shamt;
	wire [data_size-1:0] ALU_out;
	wire zero;
	
	// Sign_Extend
	wire [mem_size-1:0] imm_shift;		//18bit
	wire [data_size-1:0] imm_Extend; 	//32bit
	
	// Controller
	wire [5:0] opcode;
	wire [5:0] funct;	
	wire Branch;	
	wire Jr;
	wire J;
	wire Jal;
	wire Mem_Write;
	wire Mem_Read;
	wire RegWrite;
	wire [mem_size-1:0] imm;	//controller's imm
	
	// Regfile
	wire [4:0] Rs_addr;	
	wire [4:0] Rt_addr;	
	wire [data_size-1:0] Rs_data;	
	wire [data_size-1:0] Rt_data;	
	wire [4:0] Write_addr;
	wire [data_size-1:0] Write_data;
	
	// Jump_Ctrl
	wire Branch_Addr;
	wire Reg_addr;
	wire Jump_Addr;
	wire [1:0] JumpOP;	
	
	// PC
	parameter PC_size=18;
	wire [PC_size-1:0] PCin;
	wire [PC_size-1:0] PC_add1;
	wire [PC_size-1:0] PC_add2;
	wire [PC_size-1:0] PCout;
	wire [PC_size-1:0] PCout2;
	wire Rs;
	wire Rt;
	wire Rd;
	
	wire [data_size-1:0] Write_Back;
	
	
	////// Connect Wire //////	
	// ALU
	assign opcode=Instruction[31:26];
	assign shamt=Instruction[10:6];		//shift
	assign funct=Instruction[5:0];		
	
	// Register
	assign Rs=Instruction[25:21];
	assign Rt=Instruction[20:16];
	assign Rd=Instruction[15:11];	
	
	assign imm=Instruction[15:0];		
	
	// Data Memory
	assign DM_Address=ALU_out[17:2];	
	
	PC PC1( .clk(clk), 		//PC
			.rst(rst),
			.PCin(PCin), 
			.PCout(PCout));
	
	assign IM_Address=PCout[17:2];
	
	Add Add4_1( .In1(PCout),	//add 4
				.In2(18'd4),
				.out(PC_add1));
	
	Add Add4_2( .In1(PC_add1),	//add 4
				.In2(18'd4),
				.out(PC_add2));
	
	Controller control( .opcode(opcode),		//controller
						.funct(funct),
						.ALUop(ALU_out),
						.Branch(Branch),
						.Jr(Jr),
						.J(J),
						.Jal(Jal),
						.Mem_Write(Mem_Write),
						.Mem_Read(Mem_Read),
						.RegWrite(RegWrite),	//controller's output,regfile's input
						.imm(imm));
						 
	assign imm_shift = imm << 2;	//shift left 2
	
	Sign_Extend extend( .in(imm),
						.out(imm_Extend));
	
	Mux2to1 mux1_Reg( .select(imm),
					  .In1(Rs),
				      .In2(Rt),
					  .out(Rd));
	
	Mux2to1 mux2_Reg( .select(Jal),
					  .In1(Rd),
					  .In2(15'd31),
					  .out(Write_addr));
	
	// convert 16 bit to 32 bit
	Mux2to1#(data_size) mux_WD( .select(Jal),
								.In1({{16{1'b0}},PC_add2}),	//
								.In2(Write_Back),
								.out(Write_data));	
	
	Regfile register( .clk(clk),			//register
					  .rst(rst),
					  .Read_Addr_1(Rs_addr),
					  .Read_Addr_2(Rt_addr),
					  .Read_data_1(Rs_data),
					  .Read_data_2(Rt_data),
					  .RegWrite(RegWrite),		//control1's output
					  .Write_addr(Write_addr),	//mux2's output
					  .Write_data(Write_data));
	
	Mux2to1#(data_size) mux_ALU( .select(RegWrite),
								 .In1(Rt_data),
								 .In2(imm_Extend),
								 .out(src));  
	
	ALU alu( .ALUop(ALUop),
			 .src1(Rs_data),
			 .src2(src),
			 .shamt(shamt),
			 .ALU_result(ALU_out),
			 .zero(zero));
	
	assign imm_Extend={imm_Extend[15:0],2'b0};	//take sign_extend[15:0],shift left 2 bits
	
	Add add_mux4to1( .In1(imm_Extend),
					 .In2(PC_add1),
					 .out(PCout2));
	
	Jump_Ctrl jump( .zero(zero),
					.Branch_Addr(Branch_Addr),
					.Reg_addr(Reg_addr),
					.Jump_Addr(Jump_Addr),
					.JumpOP(JumpOP));	
	
	Mux4to1 mux4( .select(JumpOP),	
				  .In1(PC_add1),
				  .In2(PC_out2),
				  .In3(Rs_data[PC_size-1:0]),
				  .In4(imm_shift),
				  .out(PCin));	
	
	assign DM_Address=ALU_out[17:2];	
	assign DM_Write_Data=Rt_data;
	
	// Write data back 
	Mux2to1#(data_size) mux_ALU_DM( .select(Mem_Read),
									.In1(src),
									.In2(DM_Read_Data),
									.out(Write_Back));
	
endmodule





